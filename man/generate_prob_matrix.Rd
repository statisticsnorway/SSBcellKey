% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_num_lookup.R
\name{generate_prob_matrix}
\alias{generate_prob_matrix}
\title{Function for generating a probability matrix for cell key perturbation of
numeric variables.}
\usage{
generate_prob_matrix(
  D,
  step,
  datacomponents,
  noisefunction,
  minpositive = 1,
  percnoise = FALSE,
  ...
)
}
\arguments{
\item{D}{numeric scalar, describing maximum noise}

\item{step}{numeric scalar, determinng step width for noise}

\item{datacomponents}{data driven component used to calculate noise distribution}

\item{noisefunction}{function to calculate noise distribution among elements
of noisefactor, based on dcomponent.}

\item{minpositive}{numeric scalar describing lowest positive value after
perturbation. Only tested with frequencies and maxentropy.}

\item{percnoise}{boolean vector of length 1. If TRUE, noise and data
components are divided by 100 in the output in order to represent percentages
(technical fix to ensure no bugs because of machine precision).}

\item{...}{}
}
\value{
Output is a mxn matrix, where rows correspond to m possible noise
factors, and columns correspond to n possible data-driven components.
}
\description{
Function for generating a probability matrix for cell key perturbation of
numeric variables.
}
\examples{
a1 <- generate_prob_matrix(D = 3,
                          step = 1,
                          datacomponents = 0:5,
                          noisefunction = normal_noise)
a2 <- generate_prob_matrix(D = 3,
                          step = 1,
                          datacomponents = 1:5,
                          noisefunction = freq_maxentropy)
a3 <- generate_prob_matrix(D = 3,
                          step = 1,
                          datacomponents = 1:5,
                          minpositive = 2,
                          noisefunction = freq_maxentropy)

dcomponent <- seq(from = 50, to = 100, by = 10)
a4 <-  generate_prob_matrix(
    D = 15,
    step = 1,
    dcomponent,
    split_triangular,
    width = 5,
    ddc2noise = function(x)
      x / 10,
    percnoise = TRUE
  )

Visualization of noise distributions, feel free to vary column index in each
example
plot(x = as.numeric(rownames(a1)), y = a1[,1])
plot(x = as.numeric(rownames(a2)), y = a2[,4], type = "l")
plot(x = as.numeric(rownames(a3)), y = a3[,1])
plot(x = as.numeric(rownames(a4)), y = a4[,4])
}
\author{
Daniel P. Lupp, Hege Marie BÃ¸velstad
}
